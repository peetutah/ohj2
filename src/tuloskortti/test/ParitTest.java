package tuloskortti.test;
// Generated by ComTest BEGIN
import java.util.*;
import java.io.IOException;
import fi.jyu.mit.ohj2.VertaaTiedosto;
import static org.junit.Assert.*;
import org.junit.*;
import tuloskortti.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2021.04.01 15:50:02 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class ParitTest {



  // Generated by ComTest BEGIN
  /** testLisaa49 */
  @Test
  public void testLisaa49() {    // Parit: 49
    Parit lisaKoe = new Parit(); 
    Par juu = new Par (3,3,3); 
    Par ei = new Par (3,3,4); 
    assertEquals("From: Parit line: 55", false, lisaKoe.getMuutoksia()); 
    lisaKoe.lisaa(juu); 
    assertEquals("From: Parit line: 57", true, lisaKoe.getAlkiot().contains(juu)); 
    assertEquals("From: Parit line: 58", false, lisaKoe.getAlkiot().contains(ei)); 
    lisaKoe.lisaa(ei); 
    assertEquals("From: Parit line: 60", true, lisaKoe.getAlkiot().contains(juu)); 
    assertEquals("From: Parit line: 61", true, lisaKoe.getAlkiot().contains(ei)); 
    assertEquals("From: Parit line: 62", true, lisaKoe.getMuutoksia()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testGetlkm75 */
  @Test
  public void testGetlkm75() {    // Parit: 75
    Parit koe2 = new Parit(); 
    Par f = new Par(9, 6, 6); 
    Par c = new Par(9, 3, 3); 
    Par d = new Par(9, 4, 4); 
    Par a = new Par(9, 1, 1); 
    Par e = new Par(9, 5, 5); 
    Par b = new Par(9, 2, 2); 
    koe2.lisaa(b); 
    koe2.lisaa(e); 
    assertEquals("From: Parit line: 87", 2, koe2.getlkm()); 
    koe2.lisaa(c); 
    koe2.lisaa(d); 
    koe2.lisaa(a); 
    koe2.lisaa(f); 
    assertEquals("From: Parit line: 92", 6, koe2.getlkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testGetAlkiot104 */
  @Test
  public void testGetAlkiot104() {    // Parit: 104
    Parit koe = new Parit(); 
    Par f = new Par(9, 6, 6); 
    Par c = new Par(9, 3, 3); 
    Par d = new Par(9, 4, 4); 
    Par a = new Par(9, 1, 1); 
    Par e = new Par(9, 5, 5); 
    Par b = new Par(9, 2, 2); 
    Par g = new Par(10, 1, 1); 
    Par h = new Par(10, 2, 2); 
    koe.lisaa(b); 
    koe.lisaa(e); 
    koe.lisaa(c); 
    koe.lisaa(d); 
    koe.lisaa(a); 
    koe.lisaa(f); 
    koe.lisaa(h); 
    Collection<Par> koeAlkiot = koe.getAlkiot(); 
    assertEquals("From: Parit line: 124", 7, koeAlkiot.size()); 
    koe.lisaa(g); 
    assertEquals("From: Parit line: 126", 8, koeAlkiot.size()); 
    assertEquals("From: Parit line: 127", true, koeAlkiot.containsAll(koe.getAlkiot())); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testGetTdNimi139 */
  @Test
  public void testGetTdNimi139() {    // Parit: 139
    Parit tKoe = new Parit("testitiedosto"); 
    assertEquals("From: Parit line: 141", "testitiedosto.dat", tKoe.getTdNimi()); 
    Parit tyhjKoe = new Parit(""); 
    assertEquals("From: Parit line: 143", ".dat", tyhjKoe.getTdNimi()); 
    Parit oletus = new Parit(); 
    assertEquals("From: Parit line: 145", null, oletus.getTdNimi()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testGetBkNimi158 */
  @Test
  public void testGetBkNimi158() {    // Parit: 158
    Parit tKoe = new Parit("testitiedosto"); 
    assertEquals("From: Parit line: 160", "testitiedosto.bak", tKoe.getBkNimi()); 
    Parit tyhjKoe = new Parit(""); 
    assertEquals("From: Parit line: 162", ".bak", tyhjKoe.getBkNimi()); 
    Parit oletus = new Parit(); 
    assertEquals("From: Parit line: 164", null, oletus.getBkNimi()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testGetMuutoksia176 */
  @Test
  public void testGetMuutoksia176() {    // Parit: 176
    Parit mKoe = new Parit(); 
    Par uusi = new Par (3,3,3); 
    assertEquals("From: Parit line: 181", false, mKoe.getMuutoksia()); 
    mKoe.lisaa(uusi); 
    assertEquals("From: Parit line: 183", true, mKoe.getMuutoksia()); 
    Parit mKoe2 = new Parit(); 
    assertEquals("From: Parit line: 185", false, mKoe2.getMuutoksia()); 
    mKoe2.getTdNimi(); 
    mKoe2.getAlkiot(); 
    mKoe2.getlkm(); 
    assertEquals("From: Parit line: 189", false, mKoe2.getMuutoksia()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testGetRadanParluvut201 */
  @Test
  public void testGetRadanParluvut201() {    // Parit: 201
    Parit koe2 = new Parit(); 
    Par f = new Par(9, 6, 6); 
    Par c = new Par(9, 3, 3); 
    Par d = new Par(9, 4, 4); 
    Par a = new Par(9, 1, 1); 
    Par e = new Par(9, 5, 5); 
    Par b = new Par(9, 2, 2); 
    Par g = new Par(10, 1, 1); 
    Par h = new Par(10, 2, 2); 
    koe2.lisaa(b); 
    koe2.lisaa(e); 
    koe2.lisaa(c); 
    koe2.lisaa(d); 
    koe2.lisaa(a); 
    koe2.lisaa(f); 
    koe2.lisaa(h); 
    koe2.lisaa(g); 
    int[] koeLuku = new int[18]; 
    koeLuku = koe2.getRadanParluvut(9); 
    assertEquals("From: Parit line: 223", "[1, 2, 3, 4, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]", Arrays.toString(koeLuku)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testGetRadanPar240 */
  @Test
  public void testGetRadanPar240() {    // Parit: 240
    Parit koe = new Parit(); 
    Par f = new Par(9, 6, 6); 
    Par c = new Par(9, 3, 3); 
    Par d = new Par(9, 4, 4); 
    Par a = new Par(9, 1, 1); 
    Par e = new Par(9, 5, 5); 
    Par b = new Par(9, 2, 2); 
    Par g = new Par(10, 1, 1); 
    Par h = new Par(10, 2, 2); 
    koe.lisaa(b); 
    koe.lisaa(e); 
    koe.lisaa(c); 
    koe.lisaa(d); 
    koe.lisaa(a); 
    koe.lisaa(f); 
    koe.lisaa(h); 
    koe.lisaa(g); 
    List<Par> koeRata = koe.getRadanPar(9); 
    List<Par> koeRata2 = koe.getRadanPar(10); 
    Parit koe2 = new Parit(); 
    koe2.lisaa(b); 
    koe2.lisaa(e); 
    koe2.lisaa(c); 
    koe2.lisaa(d); 
    koe2.lisaa(a); 
    koe2.lisaa(f); 
    assertEquals("From: Parit line: 269", true, koeRata.containsAll(koe2.getAlkiot())); 
    Parit koe3 = new Parit(); 
    koe3.lisaa(h); 
    koe3.lisaa(g); 
    assertEquals("From: Parit line: 273", true, koeRata2.containsAll(koe3.getAlkiot())); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLueTiedosto288 
   * @throws IOException when error
   */
  @Test
  public void testLueTiedosto288() throws IOException {    // Parit: 288
    VertaaTiedosto.tuhoaTiedosto("pKoe.dat"); 
    VertaaTiedosto.kirjoitaTiedosto("pKoe.dat",
    "; Kenttien järjestys tiedostossa on seuraava:\n;rataId | väylä | par"+
    "\n1|1|3" +
    "\n1|2|3" +
    "\n1|3|3" +
    "\n1|4|3" +
    "\n1|5|3" +
    "\n1|6|3" +
    "\n1|7|3" +
    "\n1|8|3" +
    "\n1|9|3" +
    "\n1|10|3" +
    "\n1|11|3" +
    "\n1|12|3" +
    "\n1|13|3" +
    "\n1|14|3" +
    "\n1|15|3" +
    "\n1|16|3" +
    "\n1|17|3" +
    "\n1|18|3"); 
    Parit lukuKoe = new Parit("pKoe"); 
    assertEquals("From: Parit line: 318", false, lukuKoe.getMuutoksia()); 
    assertEquals("From: Parit line: 319", 0, lukuKoe.getlkm()); 
    lukuKoe.lueTiedosto(); 
    assertEquals("From: Parit line: 321", 18, lukuKoe.getlkm()); 
    assertEquals("From: Parit line: 322", true, lukuKoe.getMuutoksia()); 
    int[] tParit = new int[18]; 
    tParit = lukuKoe.getRadanParluvut(1); 
    assertEquals("From: Parit line: 325", "[3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]", Arrays.toString(tParit)); 
    VertaaTiedosto.tuhoaTiedosto("pKoe.dat"); 
    VertaaTiedosto.tuhoaTiedosto("pKoe.bak"); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testTallenna354 
   * @throws IOException when error
   */
  @Test
  public void testTallenna354() throws IOException {    // Parit: 354
    VertaaTiedosto.tuhoaTiedosto("pKoe.dat"); 
    String tulos =
    "; Kenttien järjestys tiedostossa on seuraava:\n;rataId | väylä | par"+
    "\n1|1|3" +
    "\n1|2|3" +
    "\n1|3|3" +
    "\n1|4|3" +
    "\n1|5|3" +
    "\n1|6|3" +
    "\n1|7|3" +
    "\n1|8|3" +
    "\n1|9|3" +
    "\n1|10|3" +
    "\n1|11|3" +
    "\n1|12|3" +
    "\n1|13|3" +
    "\n1|14|3" +
    "\n1|15|3" +
    "\n1|16|3" +
    "\n1|17|3" +
    "\n1|18|3"; 
    Parit talKoe = new Parit("pKoe"); 
    assertEquals("From: Parit line: 383", false, talKoe.getMuutoksia()); 
    talKoe.tallenna(); 
    assertEquals("From: Parit line: 385", "Tiedosto ei aukea: pKoe.dat", VertaaTiedosto.vertaaFileString("pKoe.dat",tulos)); 
    talKoe.perusParit(1); 
    assertEquals("From: Parit line: 387", true, talKoe.getMuutoksia()); 
    talKoe.tallenna(); 
    assertEquals("From: Parit line: 389", null, VertaaTiedosto.vertaaFileString("pKoe.dat",tulos)); 
    assertEquals("From: Parit line: 390", false, talKoe.getMuutoksia()); 
    Par uusi = new Par(5,6,7); 
    talKoe.lisaa(uusi); 
    talKoe.tallenna(); 
    assertEquals("From: Parit line: 394", "Rivi 21: Jono loppui ensin, pKoe.dat on 5|6|7", VertaaTiedosto.vertaaFileString("pKoe.dat",tulos)); 
    VertaaTiedosto.tuhoaTiedosto("pKoe.dat"); 
    VertaaTiedosto.tuhoaTiedosto("pKoe.bak"); 
  } // Generated by ComTest END
}