package tuloskortti.test;
// Generated by ComTest BEGIN
import static org.junit.Assert.*;
import org.junit.*;
import tuloskortti.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2021.03.31 14:33:00 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class ParTest {



  // Generated by ComTest BEGIN
  /** testGetRataId37 */
  @Test
  public void testGetRataId37() {    // Par: 37
    Par koe = new Par(0,1,3); 
    assertEquals("From: Par line: 39", 0, koe.getRataId()); 
    Par koe2 = new Par(0,2,4); 
    assertEquals("From: Par line: 41", 0, koe2.getRataId()); 
    Par koe3 = new Par(500,-1,0); 
    assertEquals("From: Par line: 43", 500, koe3.getRataId()); 
    Par koe4 = new Par(0,0,0); 
    assertEquals("From: Par line: 45", 0, koe4.getRataId()); 
    Par koe5 = new Par(1,20,3); 
    assertEquals("From: Par line: 47", 1, koe5.getRataId()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testGetVayla58 */
  @Test
  public void testGetVayla58() {    // Par: 58
    Par koe = new Par(0,1,3); 
    assertEquals("From: Par line: 60", 1, koe.getVayla()); 
    Par koe2 = new Par(0,2,4); 
    assertEquals("From: Par line: 62", 2, koe2.getVayla()); 
    Par koe3 = new Par(500,-1,0); 
    assertEquals("From: Par line: 64", -1, koe3.getVayla()); 
    Par koe4 = new Par(0,0,0); 
    assertEquals("From: Par line: 66", 0, koe4.getVayla()); 
    Par koe5 = new Par(1,20,3); 
    assertEquals("From: Par line: 68", 20, koe5.getVayla()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testGetPar79 */
  @Test
  public void testGetPar79() {    // Par: 79
    Par koe = new Par(0,1,3); 
    assertEquals("From: Par line: 81", 3, koe.getPar()); 
    Par koe2 = new Par(0,2,4); 
    assertEquals("From: Par line: 83", 4, koe2.getPar()); 
    Par koe3 = new Par(500,-1,0); 
    assertEquals("From: Par line: 85", 0, koe3.getPar()); 
    Par koe4 = new Par(0,0,0); 
    assertEquals("From: Par line: 87", 0, koe4.getPar()); 
    Par koe5 = new Par(1,20,3); 
    assertEquals("From: Par line: 89", 3, koe5.getPar()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testToString99 */
  @Test
  public void testToString99() {    // Par: 99
    Par koe = new Par(0,1,3); 
    assertEquals("From: Par line: 101", "0|1|3", koe.toString()); 
    Par koe2 = new Par(0,2,4); 
    assertEquals("From: Par line: 103", "0|2|4", koe2.toString()); 
    Par koe3 = new Par(500,-1,0); 
    assertEquals("From: Par line: 105", "500|-1|0", koe3.toString()); 
    Par koe4 = new Par(0,0,0); 
    assertEquals("From: Par line: 107", "0|0|0", koe4.toString()); 
    Par koe5 = new Par(1,20,3); 
    assertEquals("From: Par line: 109", "1|20|3", koe5.toString()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testParse122 
   * @throws NumberFormatException when error
   */
  @Test
  public void testParse122() throws NumberFormatException {    // Par: 122
    Par koe = new Par(); 
    koe.parse("1 | 2 | 3"); 
    assertEquals("From: Par line: 126", "1|2|3", koe.toString());
    koe.parse("      4 \n\n | \n             5 \n|    \n  6 \n "); 
    assertEquals("From: Par line: 128", "4|5|6", koe.toString()); 
    try {
    koe.parse("2 | esim | 1 "); 
    fail("Par: 129 Did not throw NumberFormatException");
    } catch(NumberFormatException _e_){ _e_.getMessage(); }
    try {
    koe.parse("|"); 
    fail("Par: 130 Did not throw NumberFormatException");
    } catch(NumberFormatException _e_){ _e_.getMessage(); }
  } // Generated by ComTest END
}